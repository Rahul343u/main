<!--begin::Form-->
<form class="m-login__form m-form" name="form" (ngSubmit)="f.form.valid && submit()" #f="ngForm" novalidate>
	<div class="form-group">
		<mat-form-field>
			<mat-label>Email</mat-label>
			<input matInput type="email" name="email" placeholder="Email address" autocomplete="off"
				   [(ngModel)]="model.email" #email="ngModel" email="true" required>
		</mat-form-field>
	</div>
	<div class="form-group">
		<mat-form-field>
			<mat-label>Password</mat-label>
			<input matInput minlength="4" type="password" name="password" placeholder="Password" autocomplete="off"
				   [(ngModel)]="model.password" #password="ngModel" required>
		</mat-form-field>
	</div>
</form>
<!--end::Form-->



public model: any = { email: 'admin@demo.com', password: 'demo' };
@Output() actionChange = new Subject<string>();
@ViewChild('f') f: NgForm;
	errors: any = [];
  
  validate(f: NgForm) {
		if (f.form.status === 'VALID') {
			return true;
		}

		this.errors = [];
		if (objectPath.get(f, 'form.controls.email.errors.email')) {
			this.errors.push(this.translate.instant('AUTH.VALIDATION.INVALID', {name: this.translate.instant('AUTH.INPUT.EMAIL')}));
		}
		if (objectPath.get(f, 'form.controls.email.errors.required')) {
			this.errors.push(this.translate.instant('AUTH.VALIDATION.REQUIRED', {name: this.translate.instant('AUTH.INPUT.EMAIL')}));
		}

		if (objectPath.get(f, 'form.controls.password.errors.required')) {
			this.errors.push(this.translate.instant('AUTH.VALIDATION.INVALID', {name: this.translate.instant('AUTH.INPUT.PASSWORD')}));
		}
		if (objectPath.get(f, 'form.controls.password.errors.minlength')) {
			this.errors.push(this.translate.instant('AUTH.VALIDATION.MIN_LENGTH', {name: this.translate.instant('AUTH.INPUT.PASSWORD')}));
		}

		if (this.errors.length > 0) {
			this.authNoticeService.setNotice(this.errors.join('<br/>'), 'error');
			this.spinner.active = false;
		}

		return false;
	}


submit() {
		this.spinner.active = true;
		if (this.validate(this.f)) {
			this.authService.login(this.model).subscribe(response => {
				if (typeof response !== 'undefined') {
					this.router.navigate(['/']);
				} else {
					this.authNoticeService.setNotice(this.translate.instant('AUTH.VALIDATION.INVALID_LOGIN'), 'error');
				}
				this.spinner.active = false;
				this.cdr.detectChanges();
			});
		}
	}
